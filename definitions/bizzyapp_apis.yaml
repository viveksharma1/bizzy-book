paths:
  '/Users/{id}/accessTokens/{fk}':
    get:
      tags:
        - User
      summary: Find a related item by id for accessTokens.
      operationId: User.prototype.__findById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - User
      summary: Delete a related item by id for accessTokens.
      operationId: User.prototype.__destroyById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - User
      summary: Update a related item by id for accessTokens.
      operationId: User.prototype.__updateById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
  '/Users/{id}/accessTokens':
    get:
      tags:
        - User
      summary: Queries accessTokens of User.
      operationId: User.prototype.__get__accessTokens
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AccessToken'
      deprecated: false
    post:
      tags:
        - User
      summary: Creates a new instance in accessTokens of this model.
      operationId: User.prototype.__create__accessTokens
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - User
      summary: Deletes all accessTokens of this model.
      operationId: User.prototype.__delete__accessTokens
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Users/{id}/accessTokens/count':
    get:
      tags:
        - User
      summary: Counts accessTokens of User.
      operationId: User.prototype.__count__accessTokens
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Users:
    post:
      tags:
        - User
      summary: Create a new instance of the model and persist it into the data source.
      operationId: User.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    put:
      tags:
        - User
      summary: Update an existing model instance or insert a new one into the data source.
      operationId: User.upsert
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    get:
      tags:
        - User
      summary: Find all instances of the model matched by filter from the data source.
      operationId: User.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      deprecated: false
  '/Users/{id}/exists':
    get:
      tags:
        - User
      summary: Check whether a model instance exists in the data source.
      operationId: 'User.exists__get_Users_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Users/{id}':
    head:
      tags:
        - User
      summary: Check whether a model instance exists in the data source.
      operationId: 'User.exists__head_Users_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - User
      summary: Find a model instance by id from the data source.
      operationId: User.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    delete:
      tags:
        - User
      summary: Delete a model instance by id from the data source.
      operationId: User.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - User
      summary: Update attributes for a model instance and persist it into the data source.
      operationId: User.prototype.updateAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/User'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  /Users/findOne:
    get:
      tags:
        - User
      summary: Find first instance of the model matched by filter from the data source.
      operationId: User.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  /Users/update:
    post:
      tags:
        - User
      summary: Update instances of the model matched by where from the data source.
      operationId: User.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            description: The number of instances updated
            type: object
      deprecated: false
  /Users/count:
    get:
      tags:
        - User
      summary: Count instances of the model matched by where from the data source.
      operationId: User.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Users/login:
    post:
      tags:
        - User
      summary: Login a user with username/email and password.
      operationId: User.login
      parameters:
        - name: credentials
          in: body
          required: true
          schema:
            type: object
        - name: include
          in: query
          description: Related objects to include in the response. See the description of return value for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            description: >+
              The response body contains properties of the AccessToken created on
              login.

              Depending on the value of `include` parameter, the body may contain
              additional properties:







                - `user` - `{User}` - Data of the currently logged in user.

              (`include=user`)


            type: object
      deprecated: false
  /Users/logout:
    post:
      tags:
        - User
      summary: Logout a user with access token.
      operationId: User.logout
      parameters: []
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Users/confirm:
    get:
      tags:
        - User
      summary: Confirm a user registration with email verification token.
      operationId: User.confirm
      parameters:
        - name: uid
          in: query
          required: true
          type: string
        - name: token
          in: query
          required: true
          type: string
        - name: redirect
          in: query
          required: false
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Users/reset:
    post:
      tags:
        - User
      summary: Reset password for a user with email.
      operationId: User.resetPassword
      parameters:
        - name: options
          in: body
          required: true
          schema:
            type: object
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /tests:
    post:
      tags:
        - test
      summary: Create a new instance of the model and persist it into the data source.
      operationId: test.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/test'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/test'
      deprecated: false
    put:
      tags:
        - test
      summary: Update an existing model instance or insert a new one into the data source.
      operationId: test.upsert
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/test'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/test'
      deprecated: false
    get:
      tags:
        - test
      summary: Find all instances of the model matched by filter from the data source.
      operationId: test.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/test'
      deprecated: false
  '/tests/{id}/exists':
    get:
      tags:
        - test
      summary: Check whether a model instance exists in the data source.
      operationId: 'test.exists__get_tests_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/tests/{id}':
    head:
      tags:
        - test
      summary: Check whether a model instance exists in the data source.
      operationId: 'test.exists__head_tests_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - test
      summary: Find a model instance by id from the data source.
      operationId: test.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/test'
      deprecated: false
    delete:
      tags:
        - test
      summary: Delete a model instance by id from the data source.
      operationId: test.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - test
      summary: Update attributes for a model instance and persist it into the data source.
      operationId: test.prototype.updateAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/test'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/test'
      deprecated: false
  /tests/findOne:
    get:
      tags:
        - test
      summary: Find first instance of the model matched by filter from the data source.
      operationId: test.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/test'
      deprecated: false
  /tests/update:
    post:
      tags:
        - test
      summary: Update instances of the model matched by where from the data source.
      operationId: test.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/test'
      responses:
        '200':
          description: Request was successful
          schema:
            description: The number of instances updated
            type: object
      deprecated: false
  /tests/count:
    get:
      tags:
        - test
      summary: Count instances of the model matched by where from the data source.
      operationId: test.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /AppSettings:
    post:
      tags:
        - AppSetting
      summary: Create a new instance of the model and persist it into the data source.
      operationId: AppSetting.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/AppSetting'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AppSetting'
      deprecated: false
    put:
      tags:
        - AppSetting
      summary: Update an existing model instance or insert a new one into the data source.
      operationId: AppSetting.upsert
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/AppSetting'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AppSetting'
      deprecated: false
    get:
      tags:
        - AppSetting
      summary: Find all instances of the model matched by filter from the data source.
      operationId: AppSetting.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AppSetting'
      deprecated: false
  '/AppSettings/{id}/exists':
    get:
      tags:
        - AppSetting
      summary: Check whether a model instance exists in the data source.
      operationId: 'AppSetting.exists__get_AppSettings_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/AppSettings/{id}':
    head:
      tags:
        - AppSetting
      summary: Check whether a model instance exists in the data source.
      operationId: 'AppSetting.exists__head_AppSettings_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - AppSetting
      summary: Find a model instance by id from the data source.
      operationId: AppSetting.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AppSetting'
      deprecated: false
    delete:
      tags:
        - AppSetting
      summary: Delete a model instance by id from the data source.
      operationId: AppSetting.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - AppSetting
      summary: Update attributes for a model instance and persist it into the data source.
      operationId: AppSetting.prototype.updateAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/AppSetting'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AppSetting'
      deprecated: false
  /AppSettings/findOne:
    get:
      tags:
        - AppSetting
      summary: Find first instance of the model matched by filter from the data source.
      operationId: AppSetting.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AppSetting'
      deprecated: false
  /AppSettings/update:
    post:
      tags:
        - AppSetting
      summary: Update instances of the model matched by where from the data source.
      operationId: AppSetting.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/AppSetting'
      responses:
        '200':
          description: Request was successful
          schema:
            description: The number of instances updated
            type: object
      deprecated: false
  /AppSettings/count:
    get:
      tags:
        - AppSetting
      summary: Count instances of the model matched by where from the data source.
      operationId: AppSetting.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /VerHistories:
    post:
      tags:
        - VerHistory
      summary: Create a new instance of the model and persist it into the data source.
      operationId: VerHistory.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/VerHistory'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/VerHistory'
      deprecated: false
    put:
      tags:
        - VerHistory
      summary: Update an existing model instance or insert a new one into the data source.
      operationId: VerHistory.upsert
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/VerHistory'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/VerHistory'
      deprecated: false
    get:
      tags:
        - VerHistory
      summary: Find all instances of the model matched by filter from the data source.
      operationId: VerHistory.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/VerHistory'
      deprecated: false
  '/VerHistories/{id}/exists':
    get:
      tags:
        - VerHistory
      summary: Check whether a model instance exists in the data source.
      operationId: 'VerHistory.exists__get_VerHistories_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/VerHistories/{id}':
    head:
      tags:
        - VerHistory
      summary: Check whether a model instance exists in the data source.
      operationId: 'VerHistory.exists__head_VerHistories_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - VerHistory
      summary: Find a model instance by id from the data source.
      operationId: VerHistory.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/VerHistory'
      deprecated: false
    delete:
      tags:
        - VerHistory
      summary: Delete a model instance by id from the data source.
      operationId: VerHistory.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - VerHistory
      summary: Update attributes for a model instance and persist it into the data source.
      operationId: VerHistory.prototype.updateAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/VerHistory'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/VerHistory'
      deprecated: false
  /VerHistories/findOne:
    get:
      tags:
        - VerHistory
      summary: Find first instance of the model matched by filter from the data source.
      operationId: VerHistory.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/VerHistory'
      deprecated: false
  /VerHistories/update:
    post:
      tags:
        - VerHistory
      summary: Update instances of the model matched by where from the data source.
      operationId: VerHistory.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/VerHistory'
      responses:
        '200':
          description: Request was successful
          schema:
            description: The number of instances updated
            type: object
      deprecated: false
  /VerHistories/count:
    get:
      tags:
        - VerHistory
      summary: Count instances of the model matched by where from the data source.
      operationId: VerHistory.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Features:
    post:
      tags:
        - Features
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Features.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/Features'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Features'
      deprecated: false
    put:
      tags:
        - Features
      summary: Update an existing model instance or insert a new one into the data source.
      operationId: Features.upsert
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/Features'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Features'
      deprecated: false
    get:
      tags:
        - Features
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Features.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Features'
      deprecated: false
  '/Features/{id}/exists':
    get:
      tags:
        - Features
      summary: Check whether a model instance exists in the data source.
      operationId: 'Features.exists__get_Features_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Features/{id}':
    head:
      tags:
        - Features
      summary: Check whether a model instance exists in the data source.
      operationId: 'Features.exists__head_Features_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Features
      summary: Find a model instance by id from the data source.
      operationId: Features.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Features'
      deprecated: false
    delete:
      tags:
        - Features
      summary: Delete a model instance by id from the data source.
      operationId: Features.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - Features
      summary: Update attributes for a model instance and persist it into the data source.
      operationId: Features.prototype.updateAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/Features'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Features'
      deprecated: false
  /Features/findOne:
    get:
      tags:
        - Features
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Features.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Features'
      deprecated: false
  /Features/update:
    post:
      tags:
        - Features
      summary: Update instances of the model matched by where from the data source.
      operationId: Features.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/Features'
      responses:
        '200':
          description: Request was successful
          schema:
            description: The number of instances updated
            type: object
      deprecated: false
  /Features/count:
    get:
      tags:
        - Features
      summary: Count instances of the model matched by where from the data source.
      operationId: Features.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Settings:
    post:
      tags:
        - Settings
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Settings.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/Settings'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Settings'
      deprecated: false
    put:
      tags:
        - Settings
      summary: Update an existing model instance or insert a new one into the data source.
      operationId: Settings.upsert
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/Settings'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Settings'
      deprecated: false
    get:
      tags:
        - Settings
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Settings.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Settings'
      deprecated: false
  '/Settings/{id}/exists':
    get:
      tags:
        - Settings
      summary: Check whether a model instance exists in the data source.
      operationId: 'Settings.exists__get_Settings_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Settings/{id}':
    head:
      tags:
        - Settings
      summary: Check whether a model instance exists in the data source.
      operationId: 'Settings.exists__head_Settings_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Settings
      summary: Find a model instance by id from the data source.
      operationId: Settings.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Settings'
      deprecated: false
    delete:
      tags:
        - Settings
      summary: Delete a model instance by id from the data source.
      operationId: Settings.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - Settings
      summary: Update attributes for a model instance and persist it into the data source.
      operationId: Settings.prototype.updateAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/Settings'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Settings'
      deprecated: false
  /Settings/findOne:
    get:
      tags:
        - Settings
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Settings.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Settings'
      deprecated: false
  /Settings/update:
    post:
      tags:
        - Settings
      summary: Update instances of the model matched by where from the data source.
      operationId: Settings.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/Settings'
      responses:
        '200':
          description: Request was successful
          schema:
            description: The number of instances updated
            type: object
      deprecated: false
  /Settings/count:
    get:
      tags:
        - Settings
      summary: Count instances of the model matched by where from the data source.
      operationId: Settings.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /ColorSchemes:
    post:
      tags:
        - ColorScheme
      summary: Create a new instance of the model and persist it into the data source.
      operationId: ColorScheme.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/ColorScheme'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ColorScheme'
      deprecated: false
    put:
      tags:
        - ColorScheme
      summary: Update an existing model instance or insert a new one into the data source.
      operationId: ColorScheme.upsert
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/ColorScheme'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ColorScheme'
      deprecated: false
    get:
      tags:
        - ColorScheme
      summary: Find all instances of the model matched by filter from the data source.
      operationId: ColorScheme.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/ColorScheme'
      deprecated: false
  '/ColorSchemes/{id}/exists':
    get:
      tags:
        - ColorScheme
      summary: Check whether a model instance exists in the data source.
      operationId: 'ColorScheme.exists__get_ColorSchemes_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/ColorSchemes/{id}':
    head:
      tags:
        - ColorScheme
      summary: Check whether a model instance exists in the data source.
      operationId: 'ColorScheme.exists__head_ColorSchemes_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - ColorScheme
      summary: Find a model instance by id from the data source.
      operationId: ColorScheme.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ColorScheme'
      deprecated: false
    delete:
      tags:
        - ColorScheme
      summary: Delete a model instance by id from the data source.
      operationId: ColorScheme.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - ColorScheme
      summary: Update attributes for a model instance and persist it into the data source.
      operationId: ColorScheme.prototype.updateAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/ColorScheme'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ColorScheme'
      deprecated: false
  /ColorSchemes/findOne:
    get:
      tags:
        - ColorScheme
      summary: Find first instance of the model matched by filter from the data source.
      operationId: ColorScheme.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ColorScheme'
      deprecated: false
  /ColorSchemes/update:
    post:
      tags:
        - ColorScheme
      summary: Update instances of the model matched by where from the data source.
      operationId: ColorScheme.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/ColorScheme'
      responses:
        '200':
          description: Request was successful
          schema:
            description: The number of instances updated
            type: object
      deprecated: false
  /ColorSchemes/count:
    get:
      tags:
        - ColorScheme
      summary: Count instances of the model matched by where from the data source.
      operationId: ColorScheme.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /AppStores:
    post:
      tags:
        - AppStore
      summary: Create a new instance of the model and persist it into the data source.
      operationId: AppStore.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/AppStore'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AppStore'
      deprecated: false
    put:
      tags:
        - AppStore
      summary: Update an existing model instance or insert a new one into the data source.
      operationId: AppStore.upsert
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/AppStore'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AppStore'
      deprecated: false
    get:
      tags:
        - AppStore
      summary: Find all instances of the model matched by filter from the data source.
      operationId: AppStore.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AppStore'
      deprecated: false
  '/AppStores/{id}/exists':
    get:
      tags:
        - AppStore
      summary: Check whether a model instance exists in the data source.
      operationId: 'AppStore.exists__get_AppStores_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/AppStores/{id}':
    head:
      tags:
        - AppStore
      summary: Check whether a model instance exists in the data source.
      operationId: 'AppStore.exists__head_AppStores_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - AppStore
      summary: Find a model instance by id from the data source.
      operationId: AppStore.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AppStore'
      deprecated: false
    delete:
      tags:
        - AppStore
      summary: Delete a model instance by id from the data source.
      operationId: AppStore.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - AppStore
      summary: Update attributes for a model instance and persist it into the data source.
      operationId: AppStore.prototype.updateAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/AppStore'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AppStore'
      deprecated: false
  /AppStores/findOne:
    get:
      tags:
        - AppStore
      summary: Find first instance of the model matched by filter from the data source.
      operationId: AppStore.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AppStore'
      deprecated: false
  /AppStores/update:
    post:
      tags:
        - AppStore
      summary: Update instances of the model matched by where from the data source.
      operationId: AppStore.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/AppStore'
      responses:
        '200':
          description: Request was successful
          schema:
            description: The number of instances updated
            type: object
      deprecated: false
  /AppStores/count:
    get:
      tags:
        - AppStore
      summary: Count instances of the model matched by where from the data source.
      operationId: AppStore.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Infos:
    post:
      tags:
        - Info
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Info.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/Info'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Info'
      deprecated: false
    put:
      tags:
        - Info
      summary: Update an existing model instance or insert a new one into the data source.
      operationId: Info.upsert
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/Info'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Info'
      deprecated: false
    get:
      tags:
        - Info
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Info.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Info'
      deprecated: false
  '/Infos/{id}/exists':
    get:
      tags:
        - Info
      summary: Check whether a model instance exists in the data source.
      operationId: 'Info.exists__get_Infos_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Infos/{id}':
    head:
      tags:
        - Info
      summary: Check whether a model instance exists in the data source.
      operationId: 'Info.exists__head_Infos_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Info
      summary: Find a model instance by id from the data source.
      operationId: Info.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Info'
      deprecated: false
    delete:
      tags:
        - Info
      summary: Delete a model instance by id from the data source.
      operationId: Info.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - Info
      summary: Update attributes for a model instance and persist it into the data source.
      operationId: Info.prototype.updateAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/Info'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Info'
      deprecated: false
  /Infos/findOne:
    get:
      tags:
        - Info
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Info.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Info'
      deprecated: false
  /Infos/update:
    post:
      tags:
        - Info
      summary: Update instances of the model matched by where from the data source.
      operationId: Info.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/Info'
      responses:
        '200':
          description: Request was successful
          schema:
            description: The number of instances updated
            type: object
      deprecated: false
  /Infos/count:
    get:
      tags:
        - Info
      summary: Count instances of the model matched by where from the data source.
      operationId: Info.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /ImgSliders:
    post:
      tags:
        - ImgSlider
      summary: Create a new instance of the model and persist it into the data source.
      operationId: ImgSlider.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/ImgSlider'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ImgSlider'
      deprecated: false
    put:
      tags:
        - ImgSlider
      summary: Update an existing model instance or insert a new one into the data source.
      operationId: ImgSlider.upsert
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/ImgSlider'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ImgSlider'
      deprecated: false
    get:
      tags:
        - ImgSlider
      summary: Find all instances of the model matched by filter from the data source.
      operationId: ImgSlider.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/ImgSlider'
      deprecated: false
  '/ImgSliders/{id}/exists':
    get:
      tags:
        - ImgSlider
      summary: Check whether a model instance exists in the data source.
      operationId: 'ImgSlider.exists__get_ImgSliders_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/ImgSliders/{id}':
    head:
      tags:
        - ImgSlider
      summary: Check whether a model instance exists in the data source.
      operationId: 'ImgSlider.exists__head_ImgSliders_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - ImgSlider
      summary: Find a model instance by id from the data source.
      operationId: ImgSlider.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ImgSlider'
      deprecated: false
    delete:
      tags:
        - ImgSlider
      summary: Delete a model instance by id from the data source.
      operationId: ImgSlider.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - ImgSlider
      summary: Update attributes for a model instance and persist it into the data source.
      operationId: ImgSlider.prototype.updateAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/ImgSlider'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ImgSlider'
      deprecated: false
  /ImgSliders/findOne:
    get:
      tags:
        - ImgSlider
      summary: Find first instance of the model matched by filter from the data source.
      operationId: ImgSlider.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ImgSlider'
      deprecated: false
  /ImgSliders/update:
    post:
      tags:
        - ImgSlider
      summary: Update instances of the model matched by where from the data source.
      operationId: ImgSlider.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/ImgSlider'
      responses:
        '200':
          description: Request was successful
          schema:
            description: The number of instances updated
            type: object
      deprecated: false
  /ImgSliders/count:
    get:
      tags:
        - ImgSlider
      summary: Count instances of the model matched by where from the data source.
      operationId: ImgSlider.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /InfoCards:
    post:
      tags:
        - InfoCards
      summary: Create a new instance of the model and persist it into the data source.
      operationId: InfoCards.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/InfoCards'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/InfoCards'
      deprecated: false
    put:
      tags:
        - InfoCards
      summary: Update an existing model instance or insert a new one into the data source.
      operationId: InfoCards.upsert
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/InfoCards'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/InfoCards'
      deprecated: false
    get:
      tags:
        - InfoCards
      summary: Find all instances of the model matched by filter from the data source.
      operationId: InfoCards.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/InfoCards'
      deprecated: false
  '/InfoCards/{id}/exists':
    get:
      tags:
        - InfoCards
      summary: Check whether a model instance exists in the data source.
      operationId: 'InfoCards.exists__get_InfoCards_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/InfoCards/{id}':
    head:
      tags:
        - InfoCards
      summary: Check whether a model instance exists in the data source.
      operationId: 'InfoCards.exists__head_InfoCards_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - InfoCards
      summary: Find a model instance by id from the data source.
      operationId: InfoCards.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/InfoCards'
      deprecated: false
    delete:
      tags:
        - InfoCards
      summary: Delete a model instance by id from the data source.
      operationId: InfoCards.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - InfoCards
      summary: Update attributes for a model instance and persist it into the data source.
      operationId: InfoCards.prototype.updateAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/InfoCards'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/InfoCards'
      deprecated: false
  /InfoCards/findOne:
    get:
      tags:
        - InfoCards
      summary: Find first instance of the model matched by filter from the data source.
      operationId: InfoCards.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/InfoCards'
      deprecated: false
  /InfoCards/update:
    post:
      tags:
        - InfoCards
      summary: Update instances of the model matched by where from the data source.
      operationId: InfoCards.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/InfoCards'
      responses:
        '200':
          description: Request was successful
          schema:
            description: The number of instances updated
            type: object
      deprecated: false
  /InfoCards/count:
    get:
      tags:
        - InfoCards
      summary: Count instances of the model matched by where from the data source.
      operationId: InfoCards.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Contacts:
    post:
      tags:
        - Contact
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Contact.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/Contact'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Contact'
      deprecated: false
    put:
      tags:
        - Contact
      summary: Update an existing model instance or insert a new one into the data source.
      operationId: Contact.upsert
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/Contact'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Contact'
      deprecated: false
    get:
      tags:
        - Contact
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Contact.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Contact'
      deprecated: false
  '/Contacts/{id}/exists':
    get:
      tags:
        - Contact
      summary: Check whether a model instance exists in the data source.
      operationId: 'Contact.exists__get_Contacts_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Contacts/{id}':
    head:
      tags:
        - Contact
      summary: Check whether a model instance exists in the data source.
      operationId: 'Contact.exists__head_Contacts_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Contact
      summary: Find a model instance by id from the data source.
      operationId: Contact.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Contact'
      deprecated: false
    delete:
      tags:
        - Contact
      summary: Delete a model instance by id from the data source.
      operationId: Contact.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - Contact
      summary: Update attributes for a model instance and persist it into the data source.
      operationId: Contact.prototype.updateAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/Contact'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Contact'
      deprecated: false
  /Contacts/findOne:
    get:
      tags:
        - Contact
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Contact.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Contact'
      deprecated: false
  /Contacts/update:
    post:
      tags:
        - Contact
      summary: Update instances of the model matched by where from the data source.
      operationId: Contact.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/Contact'
      responses:
        '200':
          description: Request was successful
          schema:
            description: The number of instances updated
            type: object
      deprecated: false
  /Contacts/count:
    get:
      tags:
        - Contact
      summary: Count instances of the model matched by where from the data source.
      operationId: Contact.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /ContactNos:
    post:
      tags:
        - ContactNo
      summary: Create a new instance of the model and persist it into the data source.
      operationId: ContactNo.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/ContactNo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ContactNo'
      deprecated: false
    put:
      tags:
        - ContactNo
      summary: Update an existing model instance or insert a new one into the data source.
      operationId: ContactNo.upsert
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/ContactNo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ContactNo'
      deprecated: false
    get:
      tags:
        - ContactNo
      summary: Find all instances of the model matched by filter from the data source.
      operationId: ContactNo.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/ContactNo'
      deprecated: false
  '/ContactNos/{id}/exists':
    get:
      tags:
        - ContactNo
      summary: Check whether a model instance exists in the data source.
      operationId: 'ContactNo.exists__get_ContactNos_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/ContactNos/{id}':
    head:
      tags:
        - ContactNo
      summary: Check whether a model instance exists in the data source.
      operationId: 'ContactNo.exists__head_ContactNos_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - ContactNo
      summary: Find a model instance by id from the data source.
      operationId: ContactNo.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ContactNo'
      deprecated: false
    delete:
      tags:
        - ContactNo
      summary: Delete a model instance by id from the data source.
      operationId: ContactNo.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - ContactNo
      summary: Update attributes for a model instance and persist it into the data source.
      operationId: ContactNo.prototype.updateAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/ContactNo'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ContactNo'
      deprecated: false
  /ContactNos/findOne:
    get:
      tags:
        - ContactNo
      summary: Find first instance of the model matched by filter from the data source.
      operationId: ContactNo.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ContactNo'
      deprecated: false
  /ContactNos/update:
    post:
      tags:
        - ContactNo
      summary: Update instances of the model matched by where from the data source.
      operationId: ContactNo.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/ContactNo'
      responses:
        '200':
          description: Request was successful
          schema:
            description: The number of instances updated
            type: object
      deprecated: false
  /ContactNos/count:
    get:
      tags:
        - ContactNo
      summary: Count instances of the model matched by where from the data source.
      operationId: ContactNo.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Emailids:
    post:
      tags:
        - Emailid
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Emailid.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/Emailid'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Emailid'
      deprecated: false
    put:
      tags:
        - Emailid
      summary: Update an existing model instance or insert a new one into the data source.
      operationId: Emailid.upsert
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/Emailid'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Emailid'
      deprecated: false
    get:
      tags:
        - Emailid
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Emailid.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Emailid'
      deprecated: false
  '/Emailids/{id}/exists':
    get:
      tags:
        - Emailid
      summary: Check whether a model instance exists in the data source.
      operationId: 'Emailid.exists__get_Emailids_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Emailids/{id}':
    head:
      tags:
        - Emailid
      summary: Check whether a model instance exists in the data source.
      operationId: 'Emailid.exists__head_Emailids_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Emailid
      summary: Find a model instance by id from the data source.
      operationId: Emailid.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Emailid'
      deprecated: false
    delete:
      tags:
        - Emailid
      summary: Delete a model instance by id from the data source.
      operationId: Emailid.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - Emailid
      summary: Update attributes for a model instance and persist it into the data source.
      operationId: Emailid.prototype.updateAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/Emailid'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Emailid'
      deprecated: false
  /Emailids/findOne:
    get:
      tags:
        - Emailid
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Emailid.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Emailid'
      deprecated: false
  /Emailids/update:
    post:
      tags:
        - Emailid
      summary: Update instances of the model matched by where from the data source.
      operationId: Emailid.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/Emailid'
      responses:
        '200':
          description: Request was successful
          schema:
            description: The number of instances updated
            type: object
      deprecated: false
  /Emailids/count:
    get:
      tags:
        - Emailid
      summary: Count instances of the model matched by where from the data source.
      operationId: Emailid.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Deals:
    post:
      tags:
        - Deal
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Deal.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/Deal'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Deal'
      deprecated: false
    put:
      tags:
        - Deal
      summary: Update an existing model instance or insert a new one into the data source.
      operationId: Deal.upsert
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/Deal'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Deal'
      deprecated: false
    get:
      tags:
        - Deal
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Deal.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Deal'
      deprecated: false
  '/Deals/{id}/exists':
    get:
      tags:
        - Deal
      summary: Check whether a model instance exists in the data source.
      operationId: 'Deal.exists__get_Deals_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Deals/{id}':
    head:
      tags:
        - Deal
      summary: Check whether a model instance exists in the data source.
      operationId: 'Deal.exists__head_Deals_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Deal
      summary: Find a model instance by id from the data source.
      operationId: Deal.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Deal'
      deprecated: false
    delete:
      tags:
        - Deal
      summary: Delete a model instance by id from the data source.
      operationId: Deal.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - Deal
      summary: Update attributes for a model instance and persist it into the data source.
      operationId: Deal.prototype.updateAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/Deal'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Deal'
      deprecated: false
  /Deals/findOne:
    get:
      tags:
        - Deal
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Deal.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Deal'
      deprecated: false
  /Deals/update:
    post:
      tags:
        - Deal
      summary: Update instances of the model matched by where from the data source.
      operationId: Deal.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/Deal'
      responses:
        '200':
          description: Request was successful
          schema:
            description: The number of instances updated
            type: object
      deprecated: false
  /Deals/count:
    get:
      tags:
        - Deal
      summary: Count instances of the model matched by where from the data source.
      operationId: Deal.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Feeds:
    post:
      tags:
        - Feed
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Feed.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/Feed'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Feed'
      deprecated: false
    put:
      tags:
        - Feed
      summary: Update an existing model instance or insert a new one into the data source.
      operationId: Feed.upsert
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/Feed'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Feed'
      deprecated: false
    get:
      tags:
        - Feed
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Feed.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Feed'
      deprecated: false
  '/Feeds/{id}/exists':
    get:
      tags:
        - Feed
      summary: Check whether a model instance exists in the data source.
      operationId: 'Feed.exists__get_Feeds_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Feeds/{id}':
    head:
      tags:
        - Feed
      summary: Check whether a model instance exists in the data source.
      operationId: 'Feed.exists__head_Feeds_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Feed
      summary: Find a model instance by id from the data source.
      operationId: Feed.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Feed'
      deprecated: false
    delete:
      tags:
        - Feed
      summary: Delete a model instance by id from the data source.
      operationId: Feed.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - Feed
      summary: Update attributes for a model instance and persist it into the data source.
      operationId: Feed.prototype.updateAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/Feed'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Feed'
      deprecated: false
  /Feeds/findOne:
    get:
      tags:
        - Feed
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Feed.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Feed'
      deprecated: false
  /Feeds/update:
    post:
      tags:
        - Feed
      summary: Update instances of the model matched by where from the data source.
      operationId: Feed.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/Feed'
      responses:
        '200':
          description: Request was successful
          schema:
            description: The number of instances updated
            type: object
      deprecated: false
  /Feeds/count:
    get:
      tags:
        - Feed
      summary: Count instances of the model matched by where from the data source.
      operationId: Feed.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Galleries:
    post:
      tags:
        - Gallery
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Gallery.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/Gallery'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Gallery'
      deprecated: false
    put:
      tags:
        - Gallery
      summary: Update an existing model instance or insert a new one into the data source.
      operationId: Gallery.upsert
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/Gallery'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Gallery'
      deprecated: false
    get:
      tags:
        - Gallery
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Gallery.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Gallery'
      deprecated: false
  '/Galleries/{id}/exists':
    get:
      tags:
        - Gallery
      summary: Check whether a model instance exists in the data source.
      operationId: 'Gallery.exists__get_Galleries_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Galleries/{id}':
    head:
      tags:
        - Gallery
      summary: Check whether a model instance exists in the data source.
      operationId: 'Gallery.exists__head_Galleries_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Gallery
      summary: Find a model instance by id from the data source.
      operationId: Gallery.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Gallery'
      deprecated: false
    delete:
      tags:
        - Gallery
      summary: Delete a model instance by id from the data source.
      operationId: Gallery.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - Gallery
      summary: Update attributes for a model instance and persist it into the data source.
      operationId: Gallery.prototype.updateAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/Gallery'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Gallery'
      deprecated: false
  /Galleries/findOne:
    get:
      tags:
        - Gallery
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Gallery.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Gallery'
      deprecated: false
  /Galleries/update:
    post:
      tags:
        - Gallery
      summary: Update instances of the model matched by where from the data source.
      operationId: Gallery.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/Gallery'
      responses:
        '200':
          description: Request was successful
          schema:
            description: The number of instances updated
            type: object
      deprecated: false
  /Galleries/count:
    get:
      tags:
        - Gallery
      summary: Count instances of the model matched by where from the data source.
      operationId: Gallery.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /TokenAuthUsers:
    post:
      tags:
        - TokenAuthUser
      summary: Create a new instance of the model and persist it into the data source.
      operationId: TokenAuthUser.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/TokenAuthUser'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/TokenAuthUser'
      deprecated: false
    put:
      tags:
        - TokenAuthUser
      summary: Update an existing model instance or insert a new one into the data source.
      operationId: TokenAuthUser.upsert
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/TokenAuthUser'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/TokenAuthUser'
      deprecated: false
    get:
      tags:
        - TokenAuthUser
      summary: Find all instances of the model matched by filter from the data source.
      operationId: TokenAuthUser.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/TokenAuthUser'
      deprecated: false
  '/TokenAuthUsers/{id}/exists':
    get:
      tags:
        - TokenAuthUser
      summary: Check whether a model instance exists in the data source.
      operationId: 'TokenAuthUser.exists__get_TokenAuthUsers_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/TokenAuthUsers/{id}':
    head:
      tags:
        - TokenAuthUser
      summary: Check whether a model instance exists in the data source.
      operationId: 'TokenAuthUser.exists__head_TokenAuthUsers_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - TokenAuthUser
      summary: Find a model instance by id from the data source.
      operationId: TokenAuthUser.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/TokenAuthUser'
      deprecated: false
    delete:
      tags:
        - TokenAuthUser
      summary: Delete a model instance by id from the data source.
      operationId: TokenAuthUser.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - TokenAuthUser
      summary: Update attributes for a model instance and persist it into the data source.
      operationId: TokenAuthUser.prototype.updateAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/TokenAuthUser'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/TokenAuthUser'
      deprecated: false
  /TokenAuthUsers/findOne:
    get:
      tags:
        - TokenAuthUser
      summary: Find first instance of the model matched by filter from the data source.
      operationId: TokenAuthUser.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/TokenAuthUser'
      deprecated: false
  /TokenAuthUsers/update:
    post:
      tags:
        - TokenAuthUser
      summary: Update instances of the model matched by where from the data source.
      operationId: TokenAuthUser.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/TokenAuthUser'
      responses:
        '200':
          description: Request was successful
          schema:
            description: The number of instances updated
            type: object
      deprecated: false
  /TokenAuthUsers/count:
    get:
      tags:
        - TokenAuthUser
      summary: Count instances of the model matched by where from the data source.
      operationId: TokenAuthUser.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /FeatureMasters:
    post:
      tags:
        - FeatureMaster
      summary: Create a new instance of the model and persist it into the data source.
      operationId: FeatureMaster.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/FeatureMaster'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeatureMaster'
      deprecated: false
    put:
      tags:
        - FeatureMaster
      summary: Update an existing model instance or insert a new one into the data source.
      operationId: FeatureMaster.upsert
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/FeatureMaster'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeatureMaster'
      deprecated: false
    get:
      tags:
        - FeatureMaster
      summary: Find all instances of the model matched by filter from the data source.
      operationId: FeatureMaster.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/FeatureMaster'
      deprecated: false
  '/FeatureMasters/{id}/exists':
    get:
      tags:
        - FeatureMaster
      summary: Check whether a model instance exists in the data source.
      operationId: 'FeatureMaster.exists__get_FeatureMasters_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/FeatureMasters/{id}':
    head:
      tags:
        - FeatureMaster
      summary: Check whether a model instance exists in the data source.
      operationId: 'FeatureMaster.exists__head_FeatureMasters_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - FeatureMaster
      summary: Find a model instance by id from the data source.
      operationId: FeatureMaster.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeatureMaster'
      deprecated: false
    delete:
      tags:
        - FeatureMaster
      summary: Delete a model instance by id from the data source.
      operationId: FeatureMaster.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - FeatureMaster
      summary: Update attributes for a model instance and persist it into the data source.
      operationId: FeatureMaster.prototype.updateAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/FeatureMaster'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeatureMaster'
      deprecated: false
  /FeatureMasters/findOne:
    get:
      tags:
        - FeatureMaster
      summary: Find first instance of the model matched by filter from the data source.
      operationId: FeatureMaster.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeatureMaster'
      deprecated: false
  /FeatureMasters/update:
    post:
      tags:
        - FeatureMaster
      summary: Update instances of the model matched by where from the data source.
      operationId: FeatureMaster.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/FeatureMaster'
      responses:
        '200':
          description: Request was successful
          schema:
            description: The number of instances updated
            type: object
      deprecated: false
  /FeatureMasters/count:
    get:
      tags:
        - FeatureMaster
      summary: Count instances of the model matched by where from the data source.
      operationId: FeatureMaster.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /res:
    post:
      tags:
        - res
      summary: Create a new instance of the model and persist it into the data source.
      operationId: res.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/res'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/res'
      deprecated: false
    put:
      tags:
        - res
      summary: Update an existing model instance or insert a new one into the data source.
      operationId: res.upsert
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/res'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/res'
      deprecated: false
    get:
      tags:
        - res
      summary: Find all instances of the model matched by filter from the data source.
      operationId: res.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/res'
      deprecated: false
  '/res/{id}/exists':
    get:
      tags:
        - res
      summary: Check whether a model instance exists in the data source.
      operationId: 'res.exists__get_res_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/res/{id}':
    head:
      tags:
        - res
      summary: Check whether a model instance exists in the data source.
      operationId: 'res.exists__head_res_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - res
      summary: Find a model instance by id from the data source.
      operationId: res.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/res'
      deprecated: false
    delete:
      tags:
        - res
      summary: Delete a model instance by id from the data source.
      operationId: res.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - res
      summary: Update attributes for a model instance and persist it into the data source.
      operationId: res.prototype.updateAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/res'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/res'
      deprecated: false
  /res/findOne:
    get:
      tags:
        - res
      summary: Find first instance of the model matched by filter from the data source.
      operationId: res.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/res'
      deprecated: false
  /res/update:
    post:
      tags:
        - res
      summary: Update instances of the model matched by where from the data source.
      operationId: res.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/res'
      responses:
        '200':
          description: Request was successful
          schema:
            description: The number of instances updated
            type: object
      deprecated: false
  /res/count:
    get:
      tags:
        - res
      summary: Count instances of the model matched by where from the data source.
      operationId: res.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /orderstatuses:
    post:
      tags:
        - orderstatus
      summary: Create a new instance of the model and persist it into the data source.
      operationId: orderstatus.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/orderstatus'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/orderstatus'
      deprecated: false
    put:
      tags:
        - orderstatus
      summary: Update an existing model instance or insert a new one into the data source.
      operationId: orderstatus.upsert
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/orderstatus'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/orderstatus'
      deprecated: false
    get:
      tags:
        - orderstatus
      summary: Find all instances of the model matched by filter from the data source.
      operationId: orderstatus.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/orderstatus'
      deprecated: false
  '/orderstatuses/{id}/exists':
    get:
      tags:
        - orderstatus
      summary: Check whether a model instance exists in the data source.
      operationId: 'orderstatus.exists__get_orderstatuses_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/orderstatuses/{id}':
    head:
      tags:
        - orderstatus
      summary: Check whether a model instance exists in the data source.
      operationId: 'orderstatus.exists__head_orderstatuses_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - orderstatus
      summary: Find a model instance by id from the data source.
      operationId: orderstatus.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/orderstatus'
      deprecated: false
    delete:
      tags:
        - orderstatus
      summary: Delete a model instance by id from the data source.
      operationId: orderstatus.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - orderstatus
      summary: Update attributes for a model instance and persist it into the data source.
      operationId: orderstatus.prototype.updateAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/orderstatus'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/orderstatus'
      deprecated: false
  /orderstatuses/findOne:
    get:
      tags:
        - orderstatus
      summary: Find first instance of the model matched by filter from the data source.
      operationId: orderstatus.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/orderstatus'
      deprecated: false
  /orderstatuses/update:
    post:
      tags:
        - orderstatus
      summary: Update instances of the model matched by where from the data source.
      operationId: orderstatus.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/orderstatus'
      responses:
        '200':
          description: Request was successful
          schema:
            description: The number of instances updated
            type: object
      deprecated: false
  /orderstatuses/count:
    get:
      tags:
        - orderstatus
      summary: Count instances of the model matched by where from the data source.
      operationId: orderstatus.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /ordertypes:
    post:
      tags:
        - ordertype
      summary: Create a new instance of the model and persist it into the data source.
      operationId: ordertype.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/ordertype'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ordertype'
      deprecated: false
    put:
      tags:
        - ordertype
      summary: Update an existing model instance or insert a new one into the data source.
      operationId: ordertype.upsert
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/ordertype'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ordertype'
      deprecated: false
    get:
      tags:
        - ordertype
      summary: Find all instances of the model matched by filter from the data source.
      operationId: ordertype.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/ordertype'
      deprecated: false
  '/ordertypes/{id}/exists':
    get:
      tags:
        - ordertype
      summary: Check whether a model instance exists in the data source.
      operationId: 'ordertype.exists__get_ordertypes_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/ordertypes/{id}':
    head:
      tags:
        - ordertype
      summary: Check whether a model instance exists in the data source.
      operationId: 'ordertype.exists__head_ordertypes_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - ordertype
      summary: Find a model instance by id from the data source.
      operationId: ordertype.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ordertype'
      deprecated: false
    delete:
      tags:
        - ordertype
      summary: Delete a model instance by id from the data source.
      operationId: ordertype.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - ordertype
      summary: Update attributes for a model instance and persist it into the data source.
      operationId: ordertype.prototype.updateAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/ordertype'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ordertype'
      deprecated: false
  /ordertypes/findOne:
    get:
      tags:
        - ordertype
      summary: Find first instance of the model matched by filter from the data source.
      operationId: ordertype.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ordertype'
      deprecated: false
  /ordertypes/update:
    post:
      tags:
        - ordertype
      summary: Update instances of the model matched by where from the data source.
      operationId: ordertype.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/ordertype'
      responses:
        '200':
          description: Request was successful
          schema:
            description: The number of instances updated
            type: object
      deprecated: false
  /ordertypes/count:
    get:
      tags:
        - ordertype
      summary: Count instances of the model matched by where from the data source.
      operationId: ordertype.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /orders:
    post:
      tags:
        - orders
      summary: Create a new instance of the model and persist it into the data source.
      operationId: orders.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/orders'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/orders'
      deprecated: false
    put:
      tags:
        - orders
      summary: Update an existing model instance or insert a new one into the data source.
      operationId: orders.upsert
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/orders'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/orders'
      deprecated: false
    get:
      tags:
        - orders
      summary: Find all instances of the model matched by filter from the data source.
      operationId: orders.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/orders'
      deprecated: false
  '/orders/{id}/exists':
    get:
      tags:
        - orders
      summary: Check whether a model instance exists in the data source.
      operationId: 'orders.exists__get_orders_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/orders/{id}':
    head:
      tags:
        - orders
      summary: Check whether a model instance exists in the data source.
      operationId: 'orders.exists__head_orders_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - orders
      summary: Find a model instance by id from the data source.
      operationId: orders.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/orders'
      deprecated: false
    delete:
      tags:
        - orders
      summary: Delete a model instance by id from the data source.
      operationId: orders.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - orders
      summary: Update attributes for a model instance and persist it into the data source.
      operationId: orders.prototype.updateAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/orders'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/orders'
      deprecated: false
  /orders/findOne:
    get:
      tags:
        - orders
      summary: Find first instance of the model matched by filter from the data source.
      operationId: orders.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/orders'
      deprecated: false
  /orders/update:
    post:
      tags:
        - orders
      summary: Update instances of the model matched by where from the data source.
      operationId: orders.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/orders'
      responses:
        '200':
          description: Request was successful
          schema:
            description: The number of instances updated
            type: object
      deprecated: false
  /orders/count:
    get:
      tags:
        - orders
      summary: Count instances of the model matched by where from the data source.
      operationId: orders.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /status_logs:
    post:
      tags:
        - status_log
      summary: Create a new instance of the model and persist it into the data source.
      operationId: status_log.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/status_log'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/status_log'
      deprecated: false
    put:
      tags:
        - status_log
      summary: Update an existing model instance or insert a new one into the data source.
      operationId: status_log.upsert
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/status_log'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/status_log'
      deprecated: false
    get:
      tags:
        - status_log
      summary: Find all instances of the model matched by filter from the data source.
      operationId: status_log.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/status_log'
      deprecated: false
  '/status_logs/{id}/exists':
    get:
      tags:
        - status_log
      summary: Check whether a model instance exists in the data source.
      operationId: 'status_log.exists__get_status_logs_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/status_logs/{id}':
    head:
      tags:
        - status_log
      summary: Check whether a model instance exists in the data source.
      operationId: 'status_log.exists__head_status_logs_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - status_log
      summary: Find a model instance by id from the data source.
      operationId: status_log.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/status_log'
      deprecated: false
    delete:
      tags:
        - status_log
      summary: Delete a model instance by id from the data source.
      operationId: status_log.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - status_log
      summary: Update attributes for a model instance and persist it into the data source.
      operationId: status_log.prototype.updateAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/status_log'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/status_log'
      deprecated: false
  /status_logs/findOne:
    get:
      tags:
        - status_log
      summary: Find first instance of the model matched by filter from the data source.
      operationId: status_log.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/status_log'
      deprecated: false
  /status_logs/update:
    post:
      tags:
        - status_log
      summary: Update instances of the model matched by where from the data source.
      operationId: status_log.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/status_log'
      responses:
        '200':
          description: Request was successful
          schema:
            description: The number of instances updated
            type: object
      deprecated: false
  /status_logs/count:
    get:
      tags:
        - status_log
      summary: Count instances of the model matched by where from the data source.
      operationId: status_log.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /items:
    post:
      tags:
        - item
      summary: Create a new instance of the model and persist it into the data source.
      operationId: item.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/item'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/item'
      deprecated: false
    put:
      tags:
        - item
      summary: Update an existing model instance or insert a new one into the data source.
      operationId: item.upsert
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/item'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/item'
      deprecated: false
    get:
      tags:
        - item
      summary: Find all instances of the model matched by filter from the data source.
      operationId: item.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/item'
      deprecated: false
  '/items/{id}/exists':
    get:
      tags:
        - item
      summary: Check whether a model instance exists in the data source.
      operationId: 'item.exists__get_items_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/items/{id}':
    head:
      tags:
        - item
      summary: Check whether a model instance exists in the data source.
      operationId: 'item.exists__head_items_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - item
      summary: Find a model instance by id from the data source.
      operationId: item.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/item'
      deprecated: false
    delete:
      tags:
        - item
      summary: Delete a model instance by id from the data source.
      operationId: item.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - item
      summary: Update attributes for a model instance and persist it into the data source.
      operationId: item.prototype.updateAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/item'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/item'
      deprecated: false
  /items/findOne:
    get:
      tags:
        - item
      summary: Find first instance of the model matched by filter from the data source.
      operationId: item.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/item'
      deprecated: false
  /items/update:
    post:
      tags:
        - item
      summary: Update instances of the model matched by where from the data source.
      operationId: item.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/item'
      responses:
        '200':
          description: Request was successful
          schema:
            description: The number of instances updated
            type: object
      deprecated: false
  /items/count:
    get:
      tags:
        - item
      summary: Count instances of the model matched by where from the data source.
      operationId: item.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /titles:
    post:
      tags:
        - title
      summary: Create a new instance of the model and persist it into the data source.
      operationId: title.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/title'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/title'
      deprecated: false
    put:
      tags:
        - title
      summary: Update an existing model instance or insert a new one into the data source.
      operationId: title.upsert
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/title'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/title'
      deprecated: false
    get:
      tags:
        - title
      summary: Find all instances of the model matched by filter from the data source.
      operationId: title.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/title'
      deprecated: false
  '/titles/{id}/exists':
    get:
      tags:
        - title
      summary: Check whether a model instance exists in the data source.
      operationId: 'title.exists__get_titles_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/titles/{id}':
    head:
      tags:
        - title
      summary: Check whether a model instance exists in the data source.
      operationId: 'title.exists__head_titles_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - title
      summary: Find a model instance by id from the data source.
      operationId: title.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/title'
      deprecated: false
    delete:
      tags:
        - title
      summary: Delete a model instance by id from the data source.
      operationId: title.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - title
      summary: Update attributes for a model instance and persist it into the data source.
      operationId: title.prototype.updateAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/title'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/title'
      deprecated: false
  /titles/findOne:
    get:
      tags:
        - title
      summary: Find first instance of the model matched by filter from the data source.
      operationId: title.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/title'
      deprecated: false
  /titles/update:
    post:
      tags:
        - title
      summary: Update instances of the model matched by where from the data source.
      operationId: title.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/title'
      responses:
        '200':
          description: Request was successful
          schema:
            description: The number of instances updated
            type: object
      deprecated: false
  /titles/count:
    get:
      tags:
        - title
      summary: Count instances of the model matched by where from the data source.
      operationId: title.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /company_masters:
    post:
      tags:
        - company_master
      summary: Create a new instance of the model and persist it into the data source.
      operationId: company_master.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/company_master'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/company_master'
      deprecated: false
    put:
      tags:
        - company_master
      summary: Update an existing model instance or insert a new one into the data source.
      operationId: company_master.upsert
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/company_master'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/company_master'
      deprecated: false
    get:
      tags:
        - company_master
      summary: Find all instances of the model matched by filter from the data source.
      operationId: company_master.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/company_master'
      deprecated: false
  '/company_masters/{id}/exists':
    get:
      tags:
        - company_master
      summary: Check whether a model instance exists in the data source.
      operationId: 'company_master.exists__get_company_masters_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/company_masters/{id}':
    head:
      tags:
        - company_master
      summary: Check whether a model instance exists in the data source.
      operationId: 'company_master.exists__head_company_masters_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - company_master
      summary: Find a model instance by id from the data source.
      operationId: company_master.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/company_master'
      deprecated: false
    delete:
      tags:
        - company_master
      summary: Delete a model instance by id from the data source.
      operationId: company_master.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - company_master
      summary: Update attributes for a model instance and persist it into the data source.
      operationId: company_master.prototype.updateAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/company_master'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/company_master'
      deprecated: false
  /company_masters/findOne:
    get:
      tags:
        - company_master
      summary: Find first instance of the model matched by filter from the data source.
      operationId: company_master.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/company_master'
      deprecated: false
  /company_masters/update:
    post:
      tags:
        - company_master
      summary: Update instances of the model matched by where from the data source.
      operationId: company_master.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/company_master'
      responses:
        '200':
          description: Request was successful
          schema:
            description: The number of instances updated
            type: object
      deprecated: false
  /company_masters/count:
    get:
      tags:
        - company_master
      summary: Count instances of the model matched by where from the data source.
      operationId: company_master.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /user_masters:
    post:
      tags:
        - user_master
      summary: Create a new instance of the model and persist it into the data source.
      operationId: user_master.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/user_master'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user_master'
      deprecated: false
    put:
      tags:
        - user_master
      summary: Update an existing model instance or insert a new one into the data source.
      operationId: user_master.upsert
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/user_master'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user_master'
      deprecated: false
    get:
      tags:
        - user_master
      summary: Find all instances of the model matched by filter from the data source.
      operationId: user_master.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/user_master'
      deprecated: false
  '/user_masters/{id}/exists':
    get:
      tags:
        - user_master
      summary: Check whether a model instance exists in the data source.
      operationId: 'user_master.exists__get_user_masters_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/user_masters/{id}':
    head:
      tags:
        - user_master
      summary: Check whether a model instance exists in the data source.
      operationId: 'user_master.exists__head_user_masters_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - user_master
      summary: Find a model instance by id from the data source.
      operationId: user_master.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user_master'
      deprecated: false
    delete:
      tags:
        - user_master
      summary: Delete a model instance by id from the data source.
      operationId: user_master.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - user_master
      summary: Update attributes for a model instance and persist it into the data source.
      operationId: user_master.prototype.updateAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/user_master'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user_master'
      deprecated: false
  /user_masters/findOne:
    get:
      tags:
        - user_master
      summary: Find first instance of the model matched by filter from the data source.
      operationId: user_master.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user_master'
      deprecated: false
  /user_masters/update:
    post:
      tags:
        - user_master
      summary: Update instances of the model matched by where from the data source.
      operationId: user_master.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/user_master'
      responses:
        '200':
          description: Request was successful
          schema:
            description: The number of instances updated
            type: object
      deprecated: false
  /user_masters/count:
    get:
      tags:
        - user_master
      summary: Count instances of the model matched by where from the data source.
      operationId: user_master.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /drivers:
    post:
      tags:
        - driver
      summary: Create a new instance of the model and persist it into the data source.
      operationId: driver.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/driver'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/driver'
      deprecated: false
    put:
      tags:
        - driver
      summary: Update an existing model instance or insert a new one into the data source.
      operationId: driver.upsert
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/driver'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/driver'
      deprecated: false
    get:
      tags:
        - driver
      summary: Find all instances of the model matched by filter from the data source.
      operationId: driver.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/driver'
      deprecated: false
  '/drivers/{id}/exists':
    get:
      tags:
        - driver
      summary: Check whether a model instance exists in the data source.
      operationId: 'driver.exists__get_drivers_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/drivers/{id}':
    head:
      tags:
        - driver
      summary: Check whether a model instance exists in the data source.
      operationId: 'driver.exists__head_drivers_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - driver
      summary: Find a model instance by id from the data source.
      operationId: driver.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/driver'
      deprecated: false
    delete:
      tags:
        - driver
      summary: Delete a model instance by id from the data source.
      operationId: driver.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - driver
      summary: Update attributes for a model instance and persist it into the data source.
      operationId: driver.prototype.updateAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/driver'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/driver'
      deprecated: false
  /drivers/findOne:
    get:
      tags:
        - driver
      summary: Find first instance of the model matched by filter from the data source.
      operationId: driver.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/driver'
      deprecated: false
  /drivers/update:
    post:
      tags:
        - driver
      summary: Update instances of the model matched by where from the data source.
      operationId: driver.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/driver'
      responses:
        '200':
          description: Request was successful
          schema:
            description: The number of instances updated
            type: object
      deprecated: false
  /drivers/count:
    get:
      tags:
        - driver
      summary: Count instances of the model matched by where from the data source.
      operationId: driver.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /user_logins:
    post:
      tags:
        - user_login
      summary: Create a new instance of the model and persist it into the data source.
      operationId: user_login.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/user_login'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user_login'
      deprecated: false
    put:
      tags:
        - user_login
      summary: Update an existing model instance or insert a new one into the data source.
      operationId: user_login.upsert
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/user_login'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user_login'
      deprecated: false
    get:
      tags:
        - user_login
      summary: Find all instances of the model matched by filter from the data source.
      operationId: user_login.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/user_login'
      deprecated: false
  '/user_logins/{id}/exists':
    get:
      tags:
        - user_login
      summary: Check whether a model instance exists in the data source.
      operationId: 'user_login.exists__get_user_logins_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/user_logins/{id}':
    head:
      tags:
        - user_login
      summary: Check whether a model instance exists in the data source.
      operationId: 'user_login.exists__head_user_logins_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - user_login
      summary: Find a model instance by id from the data source.
      operationId: user_login.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user_login'
      deprecated: false
    delete:
      tags:
        - user_login
      summary: Delete a model instance by id from the data source.
      operationId: user_login.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - user_login
      summary: Update attributes for a model instance and persist it into the data source.
      operationId: user_login.prototype.updateAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/user_login'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user_login'
      deprecated: falsey
  /user_logins/findOne:
    get:
      tags:
        - user_login
      summary: Find first instance of the model matched by filter from the data source.
      operationId: user_login.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user_login'
      deprecated: false
  /user_logins/update:
    post:
      tags:
        - user_login
      summary: Update instances of the model matched by where from the data source.
      operationId: user_login.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/user_login'
      responses:
        '200':
          description: Request was successful
          schema:
            description: The number of instances updated
            type: object
      deprecated: false
  /user_logins/count:
    get:
      tags:
        - user_login
      summary: Count instances of the model matched by where from the data source.
      operationId: user_login.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
definitions:
  x-any:
    properties: {}
  AccessToken:
    properties:
      id:
        type: string
      ttl:
        default: 1209600
        description: time to live in seconds (2 weeks by default)
        type: number
        format: double
      created:
        type: string
        format: date
      userId:
        type: number
        format: double
    required:
      - id
    additionalProperties: false
  User:
    properties:
      realm:
        type: string
      username:
        type: string
      credentials:
        type: object
      challenges:
        type: object
      email:
        type: string
      emailVerified:
        type: boolean
      status:
        type: string
      created:
        type: string
        format: date
      lastUpdated:
        type: string
        format: date
      id:
        type: number
        format: double
    required:
      - email
    additionalProperties: false
  test:
    properties:
      name:
        type: string
      address:
        type: string
      id:
        type: number
        format: double
    additionalProperties: false
  AppSetting:
    properties:
      project:
        type: string
      category:
        type: string
      status:
        type: string
      modified_dt:
        type: string
        format: date
      created_dt:
        type: string
        format: date
      Features:
        type: array
        items:
          $ref: '#/definitions/Features'
      Settings:
        type: array
        items:
          $ref: '#/definitions/Settings'
      app_store:
        type: array
        items:
          $ref: '#/definitions/AppStore'
      ver_history:
        type: array
        items:
          $ref: '#/definitions/VerHistory'
      id:
        type: number
        format: double
    additionalProperties: false
  VerHistory:
    properties:
      name:
        type: string
      desc:
        type: string
      version:
        type: string
      ios_link:
        type: string
      android_link:
        type: string
      pub_status:
        type: string
      deploy_dt:
        type: string
        format: date
      publish_dt:
        type: string
        format: date
      test_dt:
        type: string
        format: date
      id:
        type: number
        format: double
    additionalProperties: false
  Features:
    properties:
      name:
        type: string
      title:
        type: string
      desc:
        type: string
      isActive:
        type: string
      type:
        type: string
      icon:
        type: string
      bgclass:
        type: string
      code:
        type: string
      id:
        type: number
        format: double
    additionalProperties: false
  Settings:
    properties:
      name:
        type: string
      nav_style:
        type: string
      icon:
        type: string
      splash_scr:
        type: string
      color_scheme:
        type: string
      id:
        type: number
        format: double
    additionalProperties: false
  ColorScheme:
    properties:
      code:
        type: string
      name:
        type: string
      id:
        type: number
        format: double
    additionalProperties: false
  AppStore:
    properties:
      name:
        type: string
      username:
        type: string
      password:
        type: string
      url:
        type: string
      id:
        type: number
        format: double
    additionalProperties: false
  Info:
    properties:
      featurecode:
        type: string
      cards:
        type: array
        items:
          $ref: '#/definitions/InfoCards'
      img_slider:
        type: array
        items:
          $ref: '#/definitions/ImgSlider'
      id:
        type: number
        format: double
    additionalProperties: false
  ImgSlider:
    properties:
      title:
        type: string
      imgpath:
        type: string
      isActive:
        type: string
      id:
        type: number
        format: double
    additionalProperties: false
  InfoCards:
    properties:
      title:
        type: string
      subtitle:
        type: string
      desc:
        type: string
      theme:
        type: string
      created_by:
        type: string
      created_dt:
        type: string
        format: date
      isActive:
        type: string
      code:
        type: string
      img:
        type: string
      id:
        type: number
        format: double
    additionalProperties: false
  Contact:
    properties:
      title:
        type: string
      addr:
        type: string
      lat:
        type: string
      lng:
        type: string
      img:
        type: string
      theme:
        type: string
      contact_no:
        type: array
        items:
          $ref: '#/definitions/ContactNo'
      email:
        type: array
        items:
          $ref: '#/definitions/Emailid'
      id:
        type: number
        format: double
    additionalProperties: false
  ContactNo:
    properties:
      contact_no:
        type: string
      id:
        type: number
        format: double
    additionalProperties: false
  Emailid:
    properties:
      Email:
        type: string
      id:
        type: number
        format: double
    additionalProperties: false
  Deal:
    properties:
      title:
        type: string
      desc:
        type: string
      img:
        type: string
      theme:
        type: string
      coupon_code:
        type: string
      created_by:
        type: string
      isActive:
        type: string
      valid_from_dt:
        type: string
        format: date
      valid_upto_dt:
        type: string
        format: date
      created_dt:
        type: string
        format: date
      id:
        type: number
        format: double
    additionalProperties: false
  Feed:
    properties:
      title:
        type: string
      desc:
        type: string
      theme:
        type: string
      created_by:
        type: string
      isActive:
        type: string
      created_dt:
        type: string
        format: date
      id:
        type: number
        format: double
    additionalProperties: false
  Gallery:
    properties:
      title:
        type: string
      desc:
        type: string
      img:
        type: string
      album:
        type: string
      created_by:
        type: string
      isActive:
        type: string
      created_dt:
        type: string
        format: date
      id:
        type: number
        format: double
    additionalProperties: false
  TokenAuthUser:
    properties:
      username:
        type: string
      password:
        type: string
      id:
        type: number
        format: double
    additionalProperties: false
  FeatureMaster:
    properties:
      CategoryCode:
        type: string
      Category:
        type: string
      Features:
        type: array
        items:
          $ref: '#/definitions/Features'
      id:
        type: number
        format: double
    additionalProperties: false
  res:
    properties:
      Items:
        type: array
        items:
          $ref: '#/definitions/ordertype'
      add_discount:
        type: number
        format: double
      address:
        type: string
      code:
        type: string
      comp_name:
        type: string
      coupon_code:
        type: string
      customer_code:
        type: number
        format: double
      delivery_chrg:
        type: number
        format: double
      driver_mobile:
        type: number
        format: double
      driver_name:
        type: string
      gross_payable:
        type: number
        format: double
      mobile:
        type: number
        format: double
      name:
        type: string
      order_delivery_time:
        type: string
        format: date
      order_dt:
        type: string
        format: date
      order_no:
        type: string
      order_remarks:
        type: string
      order_strDate:
        type: string
        format: date
      payment_mode:
        type: string
      source:
        type: string
      status:
        type: string
      status_log:
        type: array
        items:
          $ref: '#/definitions/orderstatus'
      status_update_time:
        type: string
        format: date
      total_amount:
        type: number
        format: double
      total_discount:
        type: number
        format: double
      total_tax:
        type: number
        format: double
      user_name:
        type: string
      user_role:
        type: string
      id:
        $ref: '#/definitions/ObjectID'
    additionalProperties: false
  orderstatus:
    properties:
      st_date:
        type: string
        format: date
      status:
        type: string
      id:
        $ref: '#/definitions/ObjectID'
    additionalProperties: false
  ordertype:
    properties:
      amount:
        type: number
        format: double
      code:
        type: number
        format: double
      discount:
        type: number
        format: double
      name:
        type: string
      qty:
        type: number
        format: double
      rate:
        type: number
        format: double
      tax:
        type: number
        format: double
      total:
        type: number
        format: double
      id:
        $ref: '#/definitions/ObjectID'
    additionalProperties: false
  orders:
    properties:
      code:
        type: string
      status:
        type: string
      status_update_time:
        type: string
      customer_code:
        type: string
      name:
        type: string
      mobile:
        type: string
      address:
        type: string
      coupon_code:
        type: string
      total_amount:
        type: string
      total_discount:
        type: string
      add_discount:
        type: string
      total_tax:
        type: string
      delivery_chrg:
        type: string
      gross_payable:
        type: string
      order_strDate:
        type: string
        format: date
      order_delivery_time:
        type: string
      order_no:
        type: string
      order_dt:
        type: string
        format: date
      Items:
        type: array
        items:
          $ref: '#/definitions/item'
      gros_payable:
        type: string
      status_log:
        type: array
        items:
          $ref: '#/definitions/status_log'
      id:
        $ref: '#/definitions/ObjectID'
    additionalProperties: false
  status_log:
    properties:
      status:
        type: string
      st_date:
        type: string
      id:
        $ref: '#/definitions/ObjectID'
    additionalProperties: false
  item:
    properties:
      name:
        type: string
      qty:
        type: string
      rate:
        type: string
      amount:
        type: string
      discount:
        type: string
      tax:
        type: string
      total:
        type: string
      id:
        $ref: '#/definitions/ObjectID'
    additionalProperties: false
  title:
    properties:
      name:
        type: string
      code:
        type: number
        format: double
      id:
        $ref: '#/definitions/ObjectID'
    additionalProperties: false
  company_master:
    properties:
      rest_code:
        type: string
      name:
        type: string
      did:
        type: number
        format: double
      address:
        type: string
      owner_name:
        type: string
      contact:
        type: number
        format: double
      id:
        $ref: '#/definitions/ObjectID'
    additionalProperties: false
  user_master:
    properties:
      restro_code:
        type: array
        items:
          type: string
      user_email_id:
        type: string
      user_name:
        type: string
      user_pass:
        type: string
      user_role:
        type: string
      id:
        $ref: '#/definitions/ObjectID'
    additionalProperties: false
  driver:
    properties:
      code:
        type: string
      driver_mobile:
        type: number
        format: double
      driver_name:
        type: string
      isActive:
        type: boolean
      id:
        $ref: '#/definitions/ObjectID'
    additionalProperties: false
  user_login:
    properties:
      comp_code:
        type: string
      email:
        type: string
      mobile_no:
        type: number
        format: double
      name:
        type: string
      password:
        type: string
      role:
        type: string
      id:
        $ref: '#/definitions/ObjectID'
    additionalProperties: false
  ObjectID:
    type: string
    pattern: "^[a-fA-F\\d]{24}$"
basePath: /api
swagger: '2.0'
info:
  x-ibm-name: bizzyapp_apis
  version: 1.0.0
  title: bizzyapp_apis
schemes:
  - https
host: $(catalog.host)
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  clientIdHeader:
    type: apiKey
    in: header
    name: X-IBM-Client-Id
  clientSecretHeader:
    in: header
    name: X-IBM-Client-Secret
    type: apiKey
security:
  - clientIdHeader: []
    clientSecretHeader: []
x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  catalogs:
    apic-dev:
      properties:
        runtime-url: $(TARGET_URL)
    sb:
      properties:
        runtime-url: 'http://localhost:4001'
  assembly:
    execute:
      - invoke:
          target-url: $(runtime-url)$(request.path)$(request.search)
