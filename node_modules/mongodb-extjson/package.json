{
  "_args": [
    [
      {
        "raw": "mongodb-extjson@^1.0.5",
        "scope": null,
        "escapedName": "mongodb-extjson",
        "name": "mongodb-extjson",
        "rawSpec": "^1.0.5",
        "spec": ">=1.0.5 <2.0.0",
        "type": "range"
      },
      "E:\\bizzy-book\\node_modules\\mongodb-stitch"
    ]
  ],
  "_from": "mongodb-extjson@>=1.0.5 <2.0.0",
  "_id": "mongodb-extjson@1.0.5",
  "_inCache": true,
  "_location": "/mongodb-extjson",
  "_nodeVersion": "7.8.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/mongodb-extjson-1.0.5.tgz_1495636251497_0.0002209036611020565"
  },
  "_npmUser": {
    "name": "christkv",
    "email": "christkv@gmail.com"
  },
  "_npmVersion": "4.2.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "mongodb-extjson@^1.0.5",
    "scope": null,
    "escapedName": "mongodb-extjson",
    "name": "mongodb-extjson",
    "rawSpec": "^1.0.5",
    "spec": ">=1.0.5 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/mongodb-stitch"
  ],
  "_resolved": "https://registry.npmjs.org/mongodb-extjson/-/mongodb-extjson-1.0.5.tgz",
  "_shasum": "3faaa954883f948b65629ce9f475942810f23589",
  "_shrinkwrap": null,
  "_spec": "mongodb-extjson@^1.0.5",
  "_where": "E:\\bizzy-book\\node_modules\\mongodb-stitch",
  "author": {
    "name": "Christian Kvalheim"
  },
  "bugs": {
    "url": "https://github.com/christkv/mongodb-extjson/issues"
  },
  "dependencies": {},
  "description": "MongoDB Extended JSON library",
  "devDependencies": {
    "istanbul": "^0.4.5",
    "mocha": "^3.4.1",
    "mongodb": "^2.2.27"
  },
  "directories": {},
  "dist": {
    "shasum": "3faaa954883f948b65629ce9f475942810f23589",
    "tarball": "https://registry.npmjs.org/mongodb-extjson/-/mongodb-extjson-1.0.5.tgz"
  },
  "gitHead": "c13dc8c37e71805eda4a08b23c385e69fd6ccecd",
  "homepage": "https://github.com/christkv/mongodb-extjson#readme",
  "keywords": [
    "mongodb",
    "json",
    "extended",
    "extjson",
    "parser",
    "serializer",
    "deserializer"
  ],
  "license": "Apache-2.0",
  "main": "index.js",
  "maintainers": [
    {
      "name": "christkv",
      "email": "christkv@gmail.com"
    }
  ],
  "name": "mongodb-extjson",
  "optionalDependencies": {},
  "readme": "[![Build Status](https://travis-ci.org/christkv/mongodb-extjson.svg?branch=master)](https://travis-ci.org/christkv/mongodb-extjson)\n\n# MongoDB Extended JSON Library\n\nThe MongoDB Extended JSON Library allows you to turn a MongoDB Document into Extended JSON.\n\nhttps://github.com/mongodb/specifications/blob/master/source/extended-json.rst\n\n## Usage with MongoDB driver\nTo use this library with the driver there are a couple of way.\n\n### Override the toJSON of driver BSON types\nThis lets you override the toJSON functions on the MongoDB driver to ensure `JSON.stringify` returns an Extended JSON document. Let's look at an example.\n\n```js\nvar ExtJSON = require('mongodb-extjson');\nvar mongodb = ExtJSON.extend(require('mongodb'));\nvar Int32 = mongodb.Int32;\n\nvar doc = {\n  int32: new Int32(10),\n}\n\nconsole.log(JSON.stringify(doc, null, 2));\n```\n\n### Use library directly\nLet's look at how we can serialize a document.\n\n### Serialize a document\nSerialize a document using `ExtJSON.prototype.stringify`.\n\n```js\nvar ExtJSON = require('mongodb-extjson');\nvar mongodb = require('mongodb');\nvar Int32 = mongodb.Int32;\nvar extJSON = new ExtJSON(mongodb);\n\nvar doc = {\n  int32: new Int32(10),\n}\n\nconsole.log(extJSON.stringify(doc, null, 2));\n```\n\n### Deserialize a document\nSerialize a document using `ExtJSON.prototype.parse(string, options)`. The method supports the option `strict`.\n\n```\nstrict = true, will return BSON type objects for all values.\nstrict = false, will attempt to return native JS types where possible.\n```\n\n```js\nvar ExtJSON = require('mongodb-extjson');\nvar mongodb = require('mongodb');\nvar Int32 = mongodb.Int32;\nvar extJSON = new ExtJSON(mongodb);\n\nvar doc = {\n  int32: new Int32(10),\n}\n\n// Serialize the document\nvar text = extJSON.stringify(doc, null, 2);\n// Deserialize using strict mode (returning BSON type objects)\nconsole.dir(extJSON.parse(text, {strict: true}));\n// Deserialize using strict mode (converting to native JS types where possible)\nconsole.dir(extJSON.parse(text, {strict: true}));\n```\n\n## Usage with Builtin BSON types\nThis allows you to use this library with full types in a Browser\n\n### Serialize a document\nSerialize a document using `ExtJSON.prototype.stringify`.\n\n```js\nvar ExtJSON = require('mongodb-extjson');\nvar Int32 = ExtJSON.BSON.Int32;\nvar extJSON = new ExtJSON();\n\nvar doc = {\n  int32: new Int32(10),\n}\n\nconsole.log(extJSON.stringify(doc, null, 2));\n```\n\n### Deserialize a document\nSerialize a document using `ExtJSON.prototype.parse(string, options)`. The method supports the option `strict`.\n\n```\nstrict = true, will return BSON type objects for all values.\nstrict = false, will attempt to return native JS types where possible.\n```\n\n```js\nvar ExtJSON = require('mongodb-extjson');\nvar Int32 = ExtJSON.BSON.Int32;\nvar extJSON = new ExtJSON();\n\nvar doc = {\n  int32: new Int32(10),\n}\n\n// Serialize the document\nvar text = extJSON.stringify(doc, null, 2);\n// Deserialize using strict mode (returning BSON type objects)\nconsole.dir(extJSON.parse(text, {strict: true}));\n// Deserialize using strict mode (converting to native JS types where possible)\nconsole.dir(extJSON.parse(text, {strict: true}));\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/christkv/mongodb-extjson.git"
  },
  "scripts": {
    "coverage": "istanbul cover _mocha -- --recursive -t --ui tdd test/",
    "test": "mocha test/"
  },
  "version": "1.0.5"
}
